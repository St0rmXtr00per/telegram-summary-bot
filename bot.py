import logging
import os
import sys
import asyncio
import aiohttp
import requests
from flask import Flask, request, jsonify
from telegram import Update, Bot
from telegram.constants import ChatAction, ParseMode
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, CommandHandler, filters
from docx import Document
import threading
from concurrent.futures import ThreadPoolExecutor
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Flask app –¥–ª—è –≤–µ–±—Ö—É–∫–∞
app = Flask(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
BOT_TOKEN = os.getenv("BOT_TOKEN")
HUGGINGFACE_API_KEY = os.getenv("HUGGINGFACE_API_KEY")
HUGGINGFACE_MODEL = os.getenv("HUGGINGFACE_MODEL", "IlyaGusev/mbart_ru_sum_gazeta")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not BOT_TOKEN:
    logger.error("BOT_TOKEN environment variable is not set!")
    sys.exit(1)
if not HUGGINGFACE_API_KEY:
    logger.error("HUGGINGFACE_API_KEY environment variable is not set!")
    sys.exit(1)
if not WEBHOOK_URL:
    logger.error("WEBHOOK_URL environment variable is not set!")
    sys.exit(1)

# –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
sync_bot = Bot(token=BOT_TOKEN)

# Thread pool –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
executor = ThreadPoolExecutor(max_workers=3)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏ API
def prepare_episode_text(text: str) -> str:
    lines = text.split('\n')
    cleaned_lines = []
    
    for line in lines:
        line = line.strip()
        if line and '[' in line and ']' in line:
            if '-->' not in line and not line.isdigit():
                cleaned_lines.append(line)
    
    episode_text = ' '.join(cleaned_lines)
    
    max_chars = 3000
    if len(episode_text) > max_chars:
        quarter = max_chars // 4
        episode_text = episode_text[:quarter*3] + "..." + episode_text[-quarter:]
    
    return episode_text

def summarize_episode_with_huggingface_sync(episode_text: str, file_name: str) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ API"""
    try:
        prompt = f"""–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ —ç—Ç–æ–π —Å–µ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.
        
–í–ê–ñ–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è
- –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö —Å–µ—Ä–∏–∏
- –£–ø–æ–º–∏–Ω–∞–π –∏–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ–∫
- –ü–µ—Ä–µ—Å–∫–∞–∑ –¥–æ–ª–∂–µ–Ω —á–∏—Ç–∞—Ç—å—Å—è –∑–∞ 2 –º–∏–Ω—É—Ç—ã
- –ù–µ –æ–ø–∏—Å—ã–≤–∞–π –º–µ–ª–∫–∏–µ –¥–µ—Ç–∞–ª–∏

–¢–µ–∫—Å—Ç —Å–µ—Ä–∏–∏:
{episode_text}

–ö—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å–µ—Ä–∏–∏:"""

        api_url = f"https://api-inference.huggingface.co/models/{HUGGINGFACE_MODEL}"
        
        headers = {
            "Authorization": f"Bearer {HUGGINGFACE_API_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "inputs": prompt,
            "parameters": {
                "max_length": 300,
                "min_length": 100,
                "do_sample": False,
                "temperature": 0.3,
                "repetition_penalty": 1.1
            }
        }
        
        response = requests.post(api_url, headers=headers, json=payload, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            if isinstance(result, list) and len(result) > 0:
                summary = result[0].get('summary_text', '')
                if not summary:
                    summary = result[0].get('generated_text', '')
                    if prompt in summary:
                        summary = summary.replace(prompt, '').strip()
                
                if summary:
                    return format_episode_summary(summary, file_name)
                else:
                    return "‚ùå –ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ—Å–∫–∞–∑"
            else:
                return "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"
        elif response.status_code == 503:
            return "‚è≥ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã"
        elif response.status_code == 429:
            return "‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã API, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        else:
            logger.error(f"Hugging Face API error: {response.status_code} - {response.text}")
            return f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}"
    
    except requests.exceptions.Timeout:
        logger.error("Timeout calling Hugging Face API")
        return "‚è≥ –¢–∞–π–º–∞—É—Ç API, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
    except Exception as e:
        logger.error(f"Error calling Hugging Face API: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {str(e)}"

def format_episode_summary(summary: str, file_name: str) -> str:
    episode_name = file_name.replace('.srt', '').replace('.docx', '')
    formatted_summary = f"""üì∫ **–ö—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑: {episode_name}**

||{summary.strip()}||

_–ü–µ—Ä–µ—Å–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π_"""
    
    return formatted_summary

def extract_text_from_docx(file_path: str) -> str:
    try:
        doc = Document(file_path)
        text_parts = []
        for paragraph in doc.paragraphs:
            if paragraph.text.strip():
                text_parts.append(paragraph.text.strip())
        
        full_text = '\n'.join(text_parts)
        logger.info(f"Extracted {len(full_text)} characters from DOCX")
        return full_text
    except Exception as e:
        logger.error(f"Error extracting text from DOCX: {e}")
        raise e

def extract_text_from_srt(file_path: str) -> str:
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        blocks = content.strip().split('\n\n')
        dialogue_lines = []
        
        for block in blocks:
            lines = block.strip().split('\n')
            if len(lines) >= 3:
                text_lines = lines[2:]
                for text_line in text_lines:
                    text_line = text_line.strip()
                    if text_line and '[' in text_line and ']' in text_line:
                        dialogue_lines.append(text_line)
        
        full_text = '\n'.join(dialogue_lines)
        logger.info(f"Extracted {len(dialogue_lines)} dialogue lines from SRT")
        return full_text
    except Exception as e:
        logger.error(f"Error extracting text from SRT: {e}")
        raise e

def send_message_sync(chat_id: int, text: str, parse_mode=None, reply_to_message_id=None):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if parse_mode:
            sync_bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=parse_mode,
                reply_to_message_id=reply_to_message_id
            )
        else:
            sync_bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_to_message_id=reply_to_message_id
            )
        return True
    except Exception as e:
        logger.error(f"Error sending message: {e}")
        return False

def edit_message_sync(chat_id: int, message_id: int, text: str, parse_mode=None):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if parse_mode:
            sync_bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                parse_mode=parse_mode
            )
        else:
            sync_bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text
            )
        return True
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        return False

def delete_message_sync(chat_id: int, message_id: int):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        sync_bot.delete_message(chat_id=chat_id, message_id=message_id)
        return True
    except Exception as e:
        logger.error(f"Error deleting message: {e}")
        return False

def download_file_sync(file_id: str, file_path: str):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
    try:
        file_info = sync_bot.get_file(file_id)
        file_info.download_to_drive(file_path)
        return True
    except Exception as e:
        logger.error(f"Error downloading file: {e}")
        return False

def process_document_sync(update_data: dict):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        logger.info("Processing document synchronously")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ update
        if 'message' in update_data:
            message_data = update_data['message']
        elif 'channel_post' in update_data:
            message_data = update_data['channel_post']
        else:
            logger.error("No message or channel_post in update")
            return
        
        if 'document' not in message_data:
            logger.error("No document in message")
            return
        
        chat_id = message_data['chat']['id']
        message_id = message_data['message_id']
        document = message_data['document']
        
        file_name = document.get('file_name', 'unknown')
        file_size = document.get('file_size', 0)
        file_id = document['file_id']
        
        logger.info(f"Processing file: {file_name}, size: {file_size} bytes")
        
        if file_size > 20 * 1024 * 1024:
            send_message_sync(chat_id, "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 20MB)")
            return
        
        if not (file_name.lower().endswith('.docx') or file_name.lower().endswith('.srt')):
            send_message_sync(
                chat_id,
                "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .srt (—Å—É–±—Ç–∏—Ç—Ä—ã) –∏ .docx (–¥–æ–∫—É–º–µ–Ω—Ç—ã)\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_response = sync_bot.send_message(chat_id, "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∏–∞–ª–æ–≥–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...")
        status_message_id = status_response.message_id
        
        file_path = f"/tmp/{file_name}"
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            logger.info("Downloading file...")
            if not download_file_sync(file_id, file_path):
                edit_message_sync(chat_id, status_message_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            logger.info("Extracting dialogue text...")
            if file_name.lower().endswith('.docx'):
                raw_text = extract_text_from_docx(file_path)
            else:
                raw_text = extract_text_from_srt(file_path)
            
            if not raw_text or not raw_text.strip():
                edit_message_sync(chat_id, status_message_id, "‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
                return
            
            episode_text = prepare_episode_text(raw_text)
            
            if not episode_text or len(episode_text) < 100:
                edit_message_sync(chat_id, status_message_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞")
                return
            
            edit_message_sync(chat_id, status_message_id, "ü§ñ –°–æ–∑–¥–∞—é –ø–µ—Ä–µ—Å–∫–∞–∑ —Å–µ—Ä–∏–∏...")
            
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—Å–∫–∞–∑
            logger.info("Creating episode summary...")
            summary = summarize_episode_with_huggingface_sync(episode_text, file_name)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            delete_message_sync(chat_id, status_message_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            send_message_sync(
                chat_id,
                summary,
                parse_mode=ParseMode.MARKDOWN,
                reply_to_message_id=message_id
            )
            
            logger.info("Successfully created episode summary")
            
        except Exception as e:
            logger.error(f"Error processing file {file_name}: {e}")
            edit_message_sync(
                chat_id,
                status_message_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∏–∞–ª–æ–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–ü–µ—Ä—Å–æ–Ω–∞–∂]: —Ç–µ–∫—Å—Ç"
            )
        finally:
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                    logger.info("Temporary file removed")
                except Exception as e:
                    logger.error(f"Error removing temp file: {e}")
    
    except Exception as e:
        logger.error(f"Unexpected error in process_document_sync: {e}")

def setup_webhook_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞"""
    try:
        webhook_url = f"{WEBHOOK_URL}/{BOT_TOKEN}"
        sync_bot.set_webhook(webhook_url)
        logger.info(f"Webhook set to {webhook_url}")
        return True
    except Exception as e:
        logger.error(f"Error setting webhook: {e}")
        return False

@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook_handler():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞"""
    try:
        update_json = request.get_json(force=True)
        logger.info(f"Received webhook update: {update_json}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        has_document = False
        if 'message' in update_json and 'document' in update_json['message']:
            has_document = True
        elif 'channel_post' in update_json and 'document' in update_json['channel_post']:
            has_document = True
        
        if has_document:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            executor.submit(process_document_sync, update_json)
        elif 'message' in update_json and update_json['message'].get('text', '').startswith('/start'):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
            message_data = update_json['message']
            chat_id = message_data['chat']['id']
            
            welcome_message = """üé¨ **–ë–æ—Ç –¥–ª—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞ —Å–µ—Ä–∏–π**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç:
üé¨ `.srt` - —Ñ–∞–π–ª —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
üìÑ `.docx` - –¥–æ–∫—É–º–µ–Ω—Ç —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–ò–º—è]: —Ç–µ–∫—Å—Ç

–Ø —Å–æ–∑–¥–∞–º –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å–µ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –ü–µ—Ä–µ—Å–∫–∞–∑ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç –ø–æ–¥ —Å–ø–æ–π–ª–µ—Ä, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ä—Ç–∏—Ç—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º.

**–í–∞–∂–Ω–æ:** –Ø –∏—Å–ø–æ–ª—å–∑—É—é —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ –∏ –Ω–µ –¥–æ–±–∞–≤–ª—è—é –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è.

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏ –∂–¥–∏—Ç–µ –ø–µ—Ä–µ—Å–∫–∞–∑!"""
            
            send_message_sync(chat_id, welcome_message, parse_mode=ParseMode.MARKDOWN)
        
        return "ok"
    except Exception as e:
        logger.error(f"Error processing webhook update: {e}")
        return "error", 500

@app.route("/", methods=["GET"])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return "Bot is running!"

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞"""
    port = int(os.environ.get('PORT', 10000))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    logger.info("Setting up webhook...")
    if not setup_webhook_sync():
        logger.error("Failed to set up webhook")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    logger.info(f"Starting Flask server on port {port}")
    app.run(host='0.0.0.0', port=port, debug=False, threaded=True)

if __name__ == '__main__':
    main()
